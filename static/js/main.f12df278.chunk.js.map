{"version":3,"sources":["Feedback.js","Statistics.js","App.js","index.js"],"names":["Feedback","options","onClick","handleGood","handleNeutral","handleBad","Statistics","good","neutral","bad","total","positivePercentage","App","state","setState","prevState","countTotalFeedback","Object","values","reduce","acc","val","countPositiveFeedbackPercentage","Math","round","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAGe,SAASA,EAAT,GAAgC,IAAZC,EAAW,EAAXA,QACjC,OACE,gCACE,uDACA,+BACE,wBAAQC,QAASD,EAAQE,WAAzB,kBACA,wBAAQD,QAASD,EAAQG,cAAzB,qBACA,wBAAQF,QAASD,EAAQI,UAAzB,uBCPO,SAASC,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAIA,OACE,gCACE,4CACA,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,a,IChBaC,E,4MACnBC,MAAQ,CACNN,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPN,WAAa,WACX,EAAKW,UAAS,SAAAC,GAAS,MAAK,CAAER,KAAMQ,EAAUR,KAAO,O,EAGvDH,cAAgB,WACd,EAAKU,UAAS,SAAAC,GAAS,MAAK,CAAEP,QAASO,EAAUP,QAAU,O,EAG7DH,UAAY,WACV,EAAKS,UAAS,SAAAC,GAAS,MAAK,CAAEN,IAAKM,EAAUN,IAAM,O,EAGrDO,mBAAqB,WAEnB,OADcC,OAAOC,OAAO,EAAKL,OACpBM,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,I,EAGlDC,gCAAkC,WAIhC,OAHgBC,KAAKC,MAClB,EAAKX,MAAMN,KAAO,EAAKS,qBAAwB,M,4CAKpD,WACE,OACE,oCACE,cAAChB,EAAD,CAAUC,QAASwB,OACnB,cAACnB,EAAD,CACEC,KAAMkB,KAAKZ,MAAMN,KACjBC,QAASiB,KAAKZ,MAAML,QACpBC,IAAKgB,KAAKZ,MAAMJ,IAChBC,MAAOe,KAAKT,qBACZL,mBAAoBc,KAAKH,2C,GAxCFI,aCCjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f12df278.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default function Feedback({ options }) {\n  return (\n    <div>\n      <h1>Please leave feedback</h1>\n      <ul>\n        <button onClick={options.handleGood}>Good</button>\n        <button onClick={options.handleNeutral}>Neutral</button>\n        <button onClick={options.handleBad}>Bad</button>\n      </ul>\n    </div>\n  );\n}\n","import { Component } from 'react';\n// import PropTypes from 'prop-types';\n\nexport default function Statistics({\n  good,\n  neutral,\n  bad,\n  total,\n  positivePercentage,\n}) {\n  // const { good, neutral, bad } = this.state;\n  // const { countTotalFeedback, countPositiveFeedbackPercentage } = this;\n  return (\n    <div>\n      <h2>Statistics</h2>\n      <ul>\n        <p>Good: {good}</p>\n        <p>Neutral: {neutral}</p>\n        <p>Bad: {bad}</p>\n        <p>Total: {total}</p>\n        <p>Positive feedback: {positivePercentage}%</p>\n      </ul>\n    </div>\n  );\n}\n","import { Component } from 'react';\nimport Feedback from './Feedback';\nimport Statistics from './Statistics';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleGood = () => {\n    this.setState(prevState => ({ good: prevState.good + 1 }));\n  };\n\n  handleNeutral = () => {\n    this.setState(prevState => ({ neutral: prevState.neutral + 1 }));\n  };\n\n  handleBad = () => {\n    this.setState(prevState => ({ bad: prevState.bad + 1 }));\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state);\n    return total.reduce((acc, val) => (acc += val), 0);\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const percent = Math.round(\n      (this.state.good / this.countTotalFeedback()) * 100,\n    );\n    return percent;\n  };\n\n  render() {\n    return (\n      <section>\n        <Feedback options={this} />\n        <Statistics\n          good={this.state.good}\n          neutral={this.state.neutral}\n          bad={this.state.bad}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}