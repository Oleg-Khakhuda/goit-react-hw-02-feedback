{"version":3,"sources":["Feedback/FeedbackOptions/FeedbackOptions.js","Feedback/Statistics/Statistics.js","Feedback/Notification/Notification.js","Feedback/Section/Section.js","App.js","index.js"],"names":["FeedbackOptions","this","props","options","map","option","idx","value","type","onClick","onLeaveFeedback","Component","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","Section","title","children","App","state","countTotalFeedback","Object","values","reduce","acc","val","countPositiveFeedbackPercentage","Math","round","e","nameBtn","currentTarget","setState","prevState","keys","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGqBA,E,4JACnB,WAAU,IAAD,OACP,OACE,mCACGC,KAAKC,MAAMC,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACtB,wBACEC,MAAOF,EAEPG,KAAK,SACLC,QAAS,EAAKP,MAAMQ,gBAJtB,SAMGL,GAJIC,Y,GAP4BK,aCAxBC,E,4JACnB,WACE,MAA0DX,KAAKC,MAAvDW,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAAKC,EAA5B,EAA4BA,MAAOC,EAAnC,EAAmCA,mBAEnC,OACE,mCACE,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,gB,GAX8BN,aCAnBO,E,4JACnB,WACE,OAAO,6BAAKjB,KAAKC,MAAMiB,c,GAFeR,aCCrBS,E,4JACnB,WACE,OACE,qCACE,6BAAKnB,KAAKC,MAAMmB,QACfpB,KAAKC,MAAMoB,gB,GALiBX,aCEhBY,E,4MACnBC,MAAQ,CACNX,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPU,mBAAqB,WAEnB,OADcC,OAAOC,OAAO,EAAKH,OACpBI,QAAO,SAACC,EAAKC,GAAN,OAAeD,EAAOC,IAAM,I,EAMlDC,gCAAkC,WAIhC,OAHgBC,KAAKC,MAClB,EAAKT,MAAMX,KAAO,EAAKY,qBAAwB,M,EAKpDf,gBAAkB,SAAAwB,GAChB,IAAMC,EAAUD,EAAEE,cAAc7B,MAChC,EAAK8B,UAAS,SAAAC,GAAS,sBACpBH,EAAUG,EAAUH,GAAW,O,4CAIpC,WACE,MAA+BlC,KAAKuB,MAA5BX,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAErBU,EAGExB,KAHFwB,mBACAM,EAEE9B,KAFF8B,gCACArB,EACET,KADFS,gBAGF,OACE,qCACE,cAAC,EAAD,CAASW,MAAM,wBAAf,SACE,cAAC,EAAD,CACElB,QAASuB,OAAOa,KAAKtC,KAAKuB,OAC1Bd,gBAAiBA,MAGrB,cAAC,EAAD,CAASW,MAAM,aAAf,SAC4B,IAAzBI,IACC,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACEN,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOS,IACPR,mBAAoBc,e,GAtDDpB,aCDjC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e3034012.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class FeedbackOptions extends Component {\n  render() {\n    return (\n      <>\n        {this.props.options.map((option, idx) => (\n          <button\n            value={option}\n            key={idx}\n            type=\"button\"\n            onClick={this.props.onLeaveFeedback}\n          >\n            {option}\n          </button>\n        ))}\n      </>\n    );\n  }\n}\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Statistics extends Component {\n  render() {\n    const { good, neutral, bad, total, positivePercentage } = this.props;\n\n    return (\n      <>\n        <ul>\n          <p>Good: {good}</p>\n          <p>Neutral: {neutral}</p>\n          <p>Bad: {bad}</p>\n          <p>Total: {total}</p>\n          <p>Positive feedback: {positivePercentage}%</p>\n        </ul>\n      </>\n    );\n  }\n}\n\nStatistics.propTypes = {\n  Good: PropTypes.number,\n  Neutral: PropTypes.number,\n  Bad: PropTypes.number,\n  total: PropTypes.number,\n  positivePercentage: PropTypes.number,\n};\n","import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Notification extends Component {\n  render() {\n    return <h2>{this.props.message}</h2>;\n  }\n}\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import React from 'react';\nimport { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Section extends Component {\n  render() {\n    return (\n      <>\n        <h2>{this.props.title}</h2>\n        {this.props.children}\n      </>\n    );\n  }\n}\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import { Component } from 'react';\nimport FeedbackOptions from './Feedback/FeedbackOptions/FeedbackOptions';\nimport Statistics from './Feedback/Statistics/Statistics';\nimport Notification from './Feedback/Notification/Notification';\nimport Section from './Feedback/Section/Section';\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    const total = Object.values(this.state);\n    return total.reduce((acc, val) => (acc += val), 0);\n\n    // const { good, neutral, bad } = this.state;\n    // return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const percent = Math.round(\n      (this.state.good / this.countTotalFeedback()) * 100,\n    );\n    return percent;\n  };\n\n  onLeaveFeedback = e => {\n    const nameBtn = e.currentTarget.value;\n    this.setState(prevState => ({\n      [nameBtn]: prevState[nameBtn] + 1,\n    }));\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const {\n      countTotalFeedback,\n      countPositiveFeedbackPercentage,\n      onLeaveFeedback,\n    } = this;\n\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}